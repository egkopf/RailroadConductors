#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 23 13:50:26 2019

@author: ethankopf
"""



from __future__ import division, print_function, unicode_literals

import numpy as np
import os
import pandas as pd

np.random.seed(42)

import matplotlib
#matplotlib.use('Agg')
import matplotlib.pyplot as plt


def isNumber(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

PatientData = pd.read_excel("/Users/ethankopf/Desktop/NYCpatientsML.xlsx")
AlzheimerData = pd.read_excel("/Users/ethankopf/Desktop/AorDML.xlsx")


AlzheimerData = (AlzheimerData.values == "YES")
print(AlzheimerData)


TrainPatientsBeta = []


for i in range(0, 37722):
    patient = []
    for column in PatientData:
        if isNumber(PatientData[column].values[i]):
            patient.append(float(PatientData[column].values[i]))
        else:
            if PatientData[column].values[i]=="YES":
                patient.append(0.2)
            else:
                patient.append(0)
    TrainPatientsBeta.append(patient)
    if i%(377*5)==0: print(int((i/377.22) + 1), "% DONE")
      

TestPatientsBeta = []


for i in range(37722, 47152):
    patient = []
    for column in PatientData:
        if isNumber(PatientData[column].values[i]):
            patient.append(float(PatientData[column].values[i]))
        else:
            num = PatientData[column].values[i]=="YES"
            patient.append(num)
    TestPatientsBeta.append(patient)
    if i%(377*5)==0: print(int(((i-37722)/90) + 1), "% DONE")

  
Train_Alzheimers = AlzheimerData[0:37722]
Test_Alzheimers = AlzheimerData[37722:47152]

Train_Alzheimers.reshape(-1, 1)
Test_Alzheimers.reshape(-1, 1)




from sklearn.linear_model import SGDClassifier

sgd_clf = SGDClassifier(max_iter=600, random_state=1, loss = "modified_huber")

print(TrainPatientsBeta)
print(Train_Alzheimers)

sgd_clf.fit(TrainPatientsBeta, Train_Alzheimers)

print(sgd_clf.predict(TestPatientsBeta))



from sklearn.model_selection import cross_val_score
performance = cross_val_score(sgd_clf, TestPatientsBeta, Test_Alzheimers, cv=3, scoring="accuracy")
print("cross_val_score = ", performance)


from sklearn.metrics import confusion_matrix, precision_score, recall_score
newperformance = confusion_matrix(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
print(newperformance)


precision = precision_score(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
recall = recall_score(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
print("precision = ", precision, ", recall = ", recall)



from sklearn.metrics import f1_score
f1performance = f1_score(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
print("F1 score = ", f1performance)


from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
forest_clf = RandomForestClassifier(random_state=42)
forest_clf.fit(TrainPatientsBeta, Train_Alzheimers)
forest_prediction = forest_clf.predict(TrainPatientsBeta)

possible_scores = forest_clf.predict_proba(TestPatientsBeta)
print(possible_scores)

results = cross_val_score(forest_clf, TestPatientsBeta, Test_Alzheimers, cv=3, scoring="accuracy")
print(results)

newConfusion = confusion_matrix(Test_Alzheimers, forest_clf.predict(TestPatientsBeta))
print(newConfusion)

newf1performance = f1_score(Test_Alzheimers, forest_clf.predict(TestPatientsBeta))
print("F1 score = ", newf1performance)

newprecision = precision_score(Test_Alzheimers, forest_clf.predict(TestPatientsBeta))
newrecall = recall_score(Test_Alzheimers, forest_clf.predict(TestPatientsBeta))
print("precision = ", newprecision, ", recall = ", newrecall)




TrainPatientsBeta, Test_Alzheimers = make_classification(n_samples = 47152, n_features = 33, n_informative = 2, n_redundant = 0, random_state = 42, shuffle = False)
clf = RandomForestClassifier(n_estimators = 100, max_depth = 2, random_state = 42)
clf.fit(TrainPatientsBeta, Test_Alzheimers)
RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini', max_depth=2, max_features='auto', max_leaf_nodes = None, min_impurity_decrease = 0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf = 0.0, n_estimators=100, n_jobs=None, oob_score=False, random_state = 42, verbose = 0, warm_start = False )



print(clf.feature_importances_)
print(clf.predict([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]))
x = np.diag(np.arange(2, 12))[::-1]
x[np.diag_indices_from(x[::-1])] = np.arange(2, 12)
x2 = np.arange(x.size).reshape(x.shape)

import numpy as np
import matplotlib
import matplotlib.pyplot as plt


BiologicalParameters = ['Sex', 'Transgender', 'Hispanic Ethinicity', 'Veteran Status', 'Mental Illness', 'Intellectual Disability', 'Autism Spectrum', 'Other Developmental Disability', 'Alchohol Related Disorder', 'Drug Substance Disorder', 'Mobility Impairment Disorder', 'Hearing Visual Impairment', 'Hyperlipidemia', 'High Blood Pressure', 'Diabetes', 'Obesity', 'Heart Attack', 'Stroke', '5 Cardiac', 'Pulmonary Asthma', 'Kidney Disease', 'Liver Disease', 'Endocrine Condition', 'Neurological Condition', 'Traumatic Brain Injury', 'Joint Disease', 'Cancer', 'Other Chronic Med Condition', 'No Chronic Med Condition', 'Unknown Chronic Med Condition', 'Smokes']
Output = ["Output"]

weights = np.array(clf.feature_importances_).reshape(1,(len(clf.feature_importances_)))
print(weights.shape)

for i in range(4):
    weights = np.append(weights, weights, axis=0)
    
print(weights.shape)
plt.figure(figsize = [20, 8])
fig, ax = plt.subplots()

im = ax.imshow(weights)

cbar = ax.figure.colorbar(im, ax=ax)
cbar.ax.set_ylabel('', rotation=-90, va="bottom")

ax.set_xticks(np.arange(len(BiologicalParameters)))
ax.set_yticks(np.arange(len(Output)))

ax.set_xticklabels(BiologicalParameters)



plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor", fontsize = 'xx-small')


for i in range(len(Output)):
    for j in range(len(BiologicalParameters)):
        text = ax.text(j, i, weights[i, j],
                       ha="center", va="center", color="w")
        


ax.set_title("Heatmap")
fig.tight_layout()
plt.savefig("PosterFigureforAlzheimer's")








#feature_importances_ = [n_features ]


