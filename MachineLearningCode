from __future__ import division, print_function, unicode_literals

import numpy as np
import os
import pandas as pd

np.random.seed(42)

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


def isNumber(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

PatientData = pd.read_excel("/Users/ethankopf/Desktop/NYCpatientsML.xlsx")
AlzheimerData = pd.read_excel("/Users/ethankopf/Desktop/AorDML.xlsx")


AlzheimerData = (AlzheimerData.values == "YES")
print(AlzheimerData)


TrainPatientsBeta = []


for i in range(0, 37722):
    patient = []
    for column in PatientData:
        if isNumber(PatientData[column].values[i]):
            patient.append(float(PatientData[column].values[i]))
        else:
            if PatientData[column].values[i]=="YES":
                patient.append(0.2)
            else:
                patient.append(0)
    TrainPatientsBeta.append(patient)
    if i%(377*5)==0: print(int((i/377.22) + 1), "% DONE")
      

TestPatientsBeta = []


for i in range(37722, 47152):
    patient = []
    for column in PatientData:
        if isNumber(PatientData[column].values[i]):
            patient.append(float(PatientData[column].values[i]))
        else:
            num = PatientData[column].values[i]=="YES"
            patient.append(num)
    TestPatientsBeta.append(patient)
    if i%(377*5)==0: print(int(((i-37722)/90) + 1), "% DONE")

  
Train_Alzheimers = AlzheimerData[0:37722]
Test_Alzheimers = AlzheimerData[37722:47152]

Train_Alzheimers.reshape(-1, 1)
Test_Alzheimers.reshape(-1, 1)


from sklearn.linear_model import SGDClassifier

sgd_clf = SGDClassifier(max_iter=600, random_state=1, loss = "modified_huber")

print(TrainPatientsBeta)
print(Train_Alzheimers)

sgd_clf.fit(TrainPatientsBeta, Train_Alzheimers)

print(sgd_clf.predict(TestPatientsBeta))

from sklearn.model_selection import cross_val_score
performance = cross_val_score(sgd_clf, TestPatientsBeta, Test_Alzheimers, cv=3, scoring="accuracy")
print("cross_val_score = ", performance)


from sklearn.metrics import confusion_matrix, precision_score, recall_score
newperformance = confusion_matrix(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
print(newperformance)


precision = precision_score(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
recall = recall_score(Test_Alzheimers, sgd_clf.predict(TestPatientsBeta))
print("precision = ", precision, ", recall = ", recall)

